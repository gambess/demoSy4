<script>
    var provinces = [
        {% for provincia in provincias %}
                { name : "Provincia de {{ provincia.nombre }}", center : { lat: {{ provincia.latitud }} , lng: {{ provincia.longitud }}  } }
                {% if not loop.last %}
                    ,
                {% endif %}
        {% endfor %}
    ];
    
    var styles = [
        {
            featureType: "administrative",
            elementType: "geometry",
            stylers: [
                {visibility: "on"},
                {weight: 2},
                {color: "#FFC107"}
            ]
        }
        ,
        {
            featureType: "road",
            elementType: "geometry",
            stylers: [
                {visibility: "off"}
            ]
        }
        ,
        {
            featureType: "administrative.province",
            elementType: "geometry",
            stylers: [
                {visibility: "on"},
                {weight: 3},
                {color: "#000000"}
            ]
        }
        ,
        {
            featureType: "administrative.province",
            elementType: "labels",
            stylers: [
                {visibility: "on"}
            ]
        }
        ,
        {
            featureType: "administrative.locality",
            stylers: [
                {visibility: "off"}
            ]
        }
        ,
        {
            featureType: "road",
            elementType: "labels",
            stylers: [
                {visibility: "off"}
            ]
        }
    ];
    
    var map;
    var service;
    var infowindow;
    var InforObj = [];
    var regionCenter = {lat: {{ region.latitud }} , lng: {{ region.longitud }} };

    function initMap() {
        infowindow = new google.maps.InfoWindow();
        map = new google.maps.Map(document.getElementById('map'), {
            center: regionCenter,
            zoom: 9,
            draggable: true,
            animation: google.maps.Animation.DROP,
            mapTypeId: 'roadmap',{# mapTypeId: 'satellite', 'terrain', 'hybrid' #}
            styles: styles
        });
        var geocoder = new google.maps.Geocoder();
        geocodeAddress('{{ title_label }}', geocoder, map);
        
        Popup = createPopupClass();
        popup = new Popup(
        new google.maps.LatLng(regionCenter.lat, regionCenter.lng),
        document.getElementById('content'));
        popup.setMap(map);
    }

    function geocodeAddress(address, geocoder, resultsMap) {
        geocoder.geocode({'address': address}, function (results, status) {
            if (status === 'OK') {
                addMarkerInfo('{{ region.id }}',
                        results[0].address_components[0].long_name,
                        '{{ region.descripcion }}',
                        regionCenter,
                        resultsMap);
                resultsMap.setCenter(regionCenter);
            } else {
                alert('Geocode no fue exitoso, la raz√≥n: ' + status);
            }
        });
    }

    function addMarkerInfo(idRegion, placeName, description, position, map) {
        var contentString = '<div class="alert alert-info" role="alert">'
                + '<a href="/region/'
                + idRegion + '/edit" title="Ir a Editar ' + placeName + '"><span class="h5">'
                + placeName + ' </span><span class="glyphicon glyphicon-edit" aria-hidden="true"></span></a>'
                + '<p><small>' + description + '.</small></p>';
        const marker = new google.maps.Marker({position: position, map: map});
        const infowindow = new google.maps.InfoWindow({content: contentString, maxWidth: 400});
        marker.addListener('click', function () {
            closeOtherInfo();
            infowindow.open(marker.get('map'), marker);
            InforObj[0] = infowindow;
            setMarkers(map);
        });
        // marker.addListener('mouseover', function () {
        //     closeOtherInfo();
        //     infowindow.open(marker.get('map'), marker);
        //     InforObj[0] = infowindow;
        // });
    }

    function closeOtherInfo() {
        if (InforObj.length > 0) {
            /* detach the info-window from the marker ... undocumented in the API docs */
            InforObj[0].set("marker", null);
            /* and close it */
            InforObj[0].close();
            /* blank the array */
            InforObj.length = 0;
        }
    }
    
    function setMarkers(map) {
    // Adds markers to the map.

    var image = {
        url: 'http://sanpascualmontpellier.es/files/icon-png-small.png'
    };

        for (var i = 0; i < provinces.length; i++) {
            var province = provinces[i];
            var marker = new google.maps.Marker({
                position: { lat: province.center.lat, lng: province.center.lng },
                map: map,
                icon: image,
                title: province.name
            });
        }
    }
    
/**
 * Returns the Popup class.
 *
 * Unfortunately, the Popup class can only be defined after
 * google.maps.OverlayView is defined, when the Maps API is loaded.
 * This function should be called by initMap.
 */
function createPopupClass() {
  /**
   * A customized popup on the map.
   * @param {!google.maps.LatLng} position
   * @param {!Element} content The bubble div.
   * @constructor
   * @extends {google.maps.OverlayView}
   */
  function Popup(position, content) {
    this.position = position;

    content.classList.add('popup-bubble');

    // This zero-height div is positioned at the bottom of the bubble.
    var bubbleAnchor = document.createElement('div');
    bubbleAnchor.classList.add('popup-bubble-anchor');
    bubbleAnchor.appendChild(content);

    // This zero-height div is positioned at the bottom of the tip.
    this.containerDiv = document.createElement('div');
    this.containerDiv.classList.add('popup-container');
    this.containerDiv.appendChild(bubbleAnchor);

    // Optionally stop clicks, etc., from bubbling up to the map.
    google.maps.OverlayView.preventMapHitsAndGesturesFrom(this.containerDiv);
  }
  // ES5 magic to extend google.maps.OverlayView.
  Popup.prototype = Object.create(google.maps.OverlayView.prototype);

  /** Called when the popup is added to the map. */
  Popup.prototype.onAdd = function() {
    this.getPanes().floatPane.appendChild(this.containerDiv);
  };

  /** Called when the popup is removed from the map. */
  Popup.prototype.onRemove = function() {
    if (this.containerDiv.parentElement) {
      this.containerDiv.parentElement.removeChild(this.containerDiv);
    }
  };

  /** Called each frame when the popup needs to draw itself. */
  Popup.prototype.draw = function() {
    var divPosition = this.getProjection().fromLatLngToDivPixel(this.position);

    // Hide the popup when it is far out of view.
    var display =
        Math.abs(divPosition.x) < 4000 && Math.abs(divPosition.y) < 4000 ?
        'block' :
        'none';

    if (display === 'block') {
      this.containerDiv.style.left = divPosition.x + 'px';
      this.containerDiv.style.top = divPosition.y + 'px';
    }
    if (this.containerDiv.style.display !== display) {
      this.containerDiv.style.display = display;
    }
  };

  return Popup;
}
</script>